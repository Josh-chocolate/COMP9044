#!/bin/dash
# WRITTEN BY ZHE ZHANG AT MAR 24th 2021
# merge function of girt

# define functions
basic_check() {
	# check if the repository is there
	if ! [ -d "./.girt" ]
	then
		echo "girt-checkout: error: girt repository directory .girt not found" >&2
		exit 1
	fi

	# no commit check
	if [ "`cat .girt/CMTMSG`" = '' ]
	then
		echo "girt-merge: error: this command can not be run until after the first commit" >&2
		exit 1
	fi

	#usage check
	if [ $# -gt 3 -o $# -eq 0 ]
	then
		echo "usage:girt-merge <branch|commit> -m message"
		exit 0
	fi

	if [ "$3" = "" ]
	then
		echo "girt-merge: error: empty commit message" >&2
		exit 1
	fi
	
	if ! [ "$2" = "-m" ]
	then
		echo "usage:girt-merge <branch|commit> -m message"
		exit 0
	fi
	
}


check_commit_valid() {
	commit=$1
	if [ "`cat .girt/CMTMSG | egrep "^$commit "`" = '' ]
	then
		echo "girt-merge: error: unknown commit '${commit}'" >&2
		exit 1
	fi
}


check_branch_valid() {
	branch=$1
	if [ "`ls .girt/branches| sed 's/ /\n/g' | egrep "^${branch}$"`" = '' ]
	then
		echo "girt-merge: error: unknown branch '${branch}'" >&2
		exit 1
	fi
}

check_fast_forward() {
	merge_node=$1
	current_node=$2
	branch=$3
	
	# if the current node is in the line of the merge branch
	if ! [ "`ls .girt/branches/${branch} | sed 's/ /\n/g' | egrep "^${current_node}$"`" = '' ]
	then
		if [ "$current_node" -lt "$merge_node" ]
		then
			return 0
		else
			return 1
		fi
	else
		return 1
	fi
}


#-------------------------------------
# main procedure
#-------------------------------------
basic_check $@

message=$3

# check the first argument is either branch or commit

expr $1 + 1 >/dev/null 2>/dev/null

if [ $? -eq 0 ]
then
	check_commit_valid $1
	merge_node=$1
	
	# find the branches which contain the merge node, and use that part (from the start to the merge node) branch to do the branch merge
	# e.g: merge_node=3; branch=0---1---3----4---5
	# then the part of branch we use is 0---1----3
	
	for branch in .girt/branches/*
	do
		# there is a branch contain the merge node
		if ! [ "`ls .girt/branches/${branch} | sed 's/ /\n/g' | egrep "^${merge_node}$"`" = '' ]
		then
			# check if the current node is in the part branch
			if ! [ "`ls .girt/branches/${branch} | sed 's/ /\n/g' | egrep "^${current_node}$"`" = '' ]
			then
				if [ $current_node -le $merge_node ]
				then
					merge_branch=$branch
					break
				fi
			fi
		fi
	done
else
	merge_branch=$1
	check_branch_valid $merge_branch
	merge_node=`ls .girt/branches/${merge_branch} | sed 's/ /\n/g' | sort -nr | head -1`
fi

# get the current commit node
current_branch=`cat .girt/.current`
current_node=`ls .girt/branches/${current_branch} | sed 's/ /\n/g' | sort -nr | head -1`

# if the merge node is in the current branch then no need to merge
if ! [ "`ls .girt/branches/${current_branch} | sed 's/ /\n/g' | egrep "^${merge_node}$"`" = '' ]
then
	echo "Already up to date"
	exit 0
fi


# check if the commit nodes are in one line in the nodes graph
# specifically: 0---1---2---3
# or: nodes need to merge are 1 3, the trees are
# 0---1---2
#     1---3

check_fast_forward $merge_node $current_node $merge_branch

#---------------------------------------
# do the fast forward merge
#---------------------------------------

if [ "$?" -eq 0 ]
then
	# make the current branch exactly the same as the merge node
	
	# rm all the nodes in current branch
	for dir in .girt/branches/$current_branch/*
	do
		if [ "$dir" = ".girt/branches/$current_branch/*" ]
		then
			continue
		else
			rm -rf $dir
		fi
	done
	
	# cp all the nodes in the merge branch
	for dir in .girt/branches/$merge_branch/*
	do
		dir=`echo $dir | cut -d'/' -f4`
		if [ "$dir" -lt "$merge_node" ]
		then
			continue
		else
			cp -r .girt/branches/$merge_branch/$dir .girt/branches/$current_branch/$dir
		fi
	done
	

	# cp all the files in that node to the working directory
	for file in .girt/branches/$current_branch/$merge_node/*
	do
		cp $file .
	done
	
	# merge the logs
	rm .girt/branches/$current_branch/.log
	cp .girt/branches/$merge_branch/.log .girt/branches/$current_branch
	
	echo "Fast-forward: no commit created"
	exit 0
fi

#-------------------------------------------
# no fast forward merge
#-------------------------------------------

# check if the nodes can be merged

# find the greatest common node

common_node=''
for commit in .girt/.commit/*
do
	commit=`echo $commit | cut -d'/' -f3`
	if [ "`ls .girt/branches/$current_branch | sed 's/ /\n/g' | egrep "^${commit}$"`" = "" ]
	then
		continue
	else
		if [ "`ls .girt/branches/$merge_branch | sed 's/ /\n/g' | egrep "^${commit}$"`" = "" ]
	then
		continue
		elif [ $commit -gt $merge_node ]
		then
			continue
		else
			common_node=$commit
		fi
	fi
done
# compare the files to check if there is a file which is modified in both branches

for file in .girt/.commit/$common_node/*
do
	modified=0
	file=`echo $file | cut -d '/' -f4`
	if [ -e .girt/branches/$merge_branch/$merge_node/$file ]
	then
		diff .girt/.commit/$common_node/$file .girt/branches/$merge_branch/$merge_node/$file >/dev/null 2>/dev/null
		if ! [ "$?" -eq 0 ]
		then
			modified=`expr $modified + 1`
		fi
	fi
	
	if [ -e .girt/branches/$current_branch/$current_node/$file ]
	then
		diff .girt/.commit/$common_node/$file .girt/branches/$current_branch/$current_node/$file >/dev/null 2>/dev/null
		if ! [ "$?" -eq 0 ]
		then
			modified=`expr $modified + 1`
		fi
	fi
	if [ $modified -eq 2 ]
	then
		echo "girt-merge: error: can not merge" >&2
		exit 1
	fi
	
done

# do the merge
# update the index
rm -rf .girt/index
mkdir .girt/index

for file in .girt/branches/$current_branch/$current_node/* 
do
	cp $file .girt/index
done

# copy all the latest modified files to the index and working directory
for file in .girt/branches/$merge_branch/$merge_node/*
do
	file=`echo $file | cut -d'/' -f5`
	if [ -e .girt/index/$file ]
	then
		diff .girt/branches/$merge_branch/$merge_node/$file .girt/.commit/$common_node/$file >/dev/null 2>/dev/null
		if ! [ $? -eq 0 ]
		then
			rm .girt/index/$file
			cp .girt/branches/$merge_branch/$merge_node/$file .girt/index
			cp .girt/branches/$merge_branch/$merge_node/$file .
		fi
	else
		cp .girt/branches/$merge_branch/$merge_node/$file .girt/index
		cp .girt/branches/$merge_branch/$merge_node/$file .
	fi
done

# make commit

girt-commit -m $message
new_commit=`cat .girt/CMTMSG | cut -d' ' -f1 | head -1`
cp -r .girt/branches/$current_branch/$new_commit .girt/branches/$merge_branch/$new_commit

# merge the logs

while read -r line 
do
	commit=`echo $line | cut -d' ' -f1`
	if [ $commit -le $merge_node -a "`egrep "^${commit} " .girt/branches/$current_branch/.log`" = "" ]
	then
		echo $line >>.girt/branches/$current_branch/.log
	fi
done <.girt/branches/$merge_branch/.log











